pragma solidity ^0.8.0;

contract CryptoKids {
    address owner;

    event LogKidFundingRecieved(address addr, uint amount, uint contractBalance);

    constructor() {
        owner = msg.sender;
    }

    struct kid {
        address payable walletAddress;
        string firstName;
        string lastName;
        uint releaseTime;
        uint amount;
        bool canWithdraw;

    }

    kid[] public kids;

    modifier onlyOwner {
        require(msg.sender == owner, "Only owner can add kids");
        _;
    }

    function addKids(address payable walletAddress, string memory firstName,string memory lastName, uint releaseTime, uint amount,bool canWithdraw) public onlyOwner {
        kids.push(kid(walletAddress, firstName, lastName, releaseTime, amount, canWithdraw));
    }

    function balanceOf() public view returns(uint){
        return address(this).balance;
    }

    function deposit(address walletAddress) payable public {
        addToKidsBalance(walletAddress);
    }

    function addToKidsBalance(address walletAddress) private {
        for(uint i; i <kids.length; i++) {
            if(kids[i].walletAddress == walletAddress) {
                kids[i].amount += msg.value;
                emit LogKidFundingRecieved(walletAddress, msg.value, balanceOf());
            }
        }
    }

    function getIndex(address walletAddress) view private returns(uint) {
        for(uint i = 0; i<kids.length; i++) {
            if (kids[i].walletAddress == walletAddress) {
                return i;
            }
        }
        return 999;
    }    

    function availableToWithdraw(address walletAddress) public returns(bool) {
        uint i = getIndex(walletAddress);
        require(block.timestamp > kids[i].releaseTime, "you cannot withdraw yet");
        if (block.timestamp > kids[i].releaseTime) {
            kids[i]. canWithdraw = true;
            return true;
        }
        else{return false;}
    }

    function withdraw(address payable walletAddress) payable public {
        uint i = getIndex(walletAddress);
        require(msg.sender == kids[i].walletAddress, "you must be the kid to withdraw");
        require(kids[i].canWithdraw == true, "You are not able to withdraw");

        kids[i].walletAddress.transfer(kids[i].amount);
    }

}
